#!/usr/bin/env bash

# "-l|--lab" Lab scenario to deploy
# "-r|--region" region to deploy the resources
# "-s|--sku" nodes SKU
# "-u|--user" User alias to add on the lab name
# "-v|--validate" validate resolution
# "-h|--help" help info
# "--version" print version

set -uo pipefail

LOCATION="centralus"
POSTFIX=$(LC_ALL=C tr -cd "a-z0-9" < /dev/urandom | tr -dc '[:alnum:]' | fold -w 6 | head -n 1)
RG_NAME=""
ARO_NAME=""
LAB_SCENARIO=""
USER_ALIAS=""
VERSION="1.0.0"
SHOULD_VALIDATE=0


# HACK: Might be able to replace this with a built-in getopts
# Reading options - should be a better way to do this
TEMP=$(getopt -o g:n:l:r:u:hv --long resource-group:,name:,lab:,region:,user:,help,validate,version -n aro-flp-labs.sh -- "$@")
eval set -- "$TEMP"

usage() {
  echo -e "$0 - $VERSION"
  echo -e "------"
  echo -e "Options and Flags:"
  echo -e "\t-g, --resource-group:\t Name of the resource group to use for the lab. Autogenerated if not provided."
  echo -e "\t-n, --name:\t\t The name of the ARO cluster to create. Autogenerated if not provided."
  echo -e "\t-l, --lab:\t\t Lab number. Required."
  echo -e "\t-r, --region:\t\t Region to deploy the lab environment in. Defaults to centralus if not provided."
  echo -e "\t-u, --user:\t\t User alias to append to the resource group name."
  echo -e "\t-h, --help:\t\t Print this help text."
  echo -e "\t-v, --validate:\t\t Validate the lab scenario. The -l option is required if this flag is passed."
  echo -e ""
  echo -e "Lab Scenarios:"
  echo -e "\tLab 1: VNET route table sends traffic to NVA"
  echo -e "\tLab 2: Egress network policies prevent outbound traffic from pods"
  echo -e "\tLab 3: VNET NSG prevents all inbound traffic"
}

while true ;
do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        --version)
            echo -e "$VERSION"
            exit 0
            ;;
        -g|--resource-group)
            case "$2" in
                "")
                    RG_NAME="aro-lab"
                    shift 2
                    ;;
                *)
                    RG_NAME="$2"
                    shift 2
                    ;;
            esac;;
        -n|--name)
            case "$2" in
                "")
                    ARO_NAME="aro-cluster"
                    shift 2
                    ;;
                *)
                    ARO_NAME="$2"
                    shift 2
                    ;;
            esac;;
        -l|--lab)
            case "$2" in
                "")
                    echo -e "Error: Lab scenario number must be supplied"
                    exit 0
                    ;;
                *)
                    LAB_SCENARIO="$2"
                    shift 2
                    ;;
            esac;;
        -r|--region)
            case "$2" in
                "")
                    shift 2
                    ;;
                *)
                    LOCATION="$2"
                    shift 2
                    ;;
            esac;;
        -u|--user)
            case "$2" in
                "")
                    shift 2
                    ;;
                *)
                    USER_ALIAS="$2"
                    shift 2
                    ;;
            esac;;
        -v|--validate)
            SHOULD_VALIDATE=1
            shift
            ;;
        *)
            echo -e "Error: Invalid argument supplied"
            exit 1
            ;;
    esac
done

# If we have a user alias provided, update some of the resource names
if [ -n "${USER_ALIAS}" ]; then
    RG_NAME="$RG_NAME-$USER_ALIAS"
    ARO_NAME="$ARO_NAME-$USER_ALIAS"
fi

source ./common_funcs.sh
debug_vars

lab1_logic() {
    az_login_check

    source ./labs/lab1.sh
    if [ "${SHOULD_VALIDATE}" -eq 1 ]; then
        lab1_validate
    else
        lab1_build
    fi
}

lab2_logic() {
    az_login_check

    source ./labs/lab2.sh
    if [ "${SHOULD_VALIDATE}" -eq 1 ]; then
        lab2_validate
    else
        lab2_build
    fi
}

lab3_logic() {
    az_login_check

    source ./labs/lab3.sh
    if [ "${SHOULD_VALIDATE}" -eq 1 ]; then
        lab3_validate
    else
        lab3_build
    fi
}

#### Time to party - let's set this up for the right lab scenario and call out to the right stuff
case $LAB_SCENARIO in
    1)
        lab1_logic;;
    2)
        lab2_logic;;
    *)
        echo -e "Error: Invalid lab number provided. Run with --help for a scenario list."
        exit 1
        ;;
esac


